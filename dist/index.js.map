{"mappings":";;;;;;;;;;;;;;AAAA;;;IAIA,wCAiCG,GAjCY,IAAI,CAAA,GAAA,+BAAW,CAAA,CAAC;IAC7B,MAAM,UAAU,EAAC,UAAE,MAAM,CAAA,EAAE,EAAE;QAC3B,mBAAmB;QACnB,MAAM,YAAE,QAAQ,CAAA,EAAE,GAAG,MAAM,MAAM,CAAC,SAAS,CAAC;YAAC,aAAa;SAAC,CAAC,AAAC;QAC7D,8BAA8B;QAC9B,IAAI,MAAM,GAAG,IAAI,AAAC;QAClB,MAAM,OAAO,GAAG,QAAQ,EAAE,KAAK,EAAE,MAAM,CAAC,CAAA,CAAC,GAAI,CAAA,GAAA,uBAAO,CAAA,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,OAAO,CAAC,AAAC;QAC5E,IAAI,OAAO,EAAE,MAAM,KAAK,CAAC,EACvB,MAAM,GAAI,CAAA,MAAM,MAAM,CAAC,SAAS,CAAC;YAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM;SAAC,CAAC,CAAA,EAAG,QAAQ,CAAC;aAC5D,IAAI,OAAO,EAAE,MAAM,GAAG,CAAC,EAC5B,MAAM,GAAG,MAAM,OAAO,CAAC,GAAG,CACxB,OAAO,CAAC,GAAG,CACT,OAAO,GAAG,GAAM,CAAA,MAAM,MAAM,CAAC,SAAS,CAAC;gBAAC,GAAG,CAAC,MAAM;aAAC,CAAC,CAAA,EAAG,QAAQ,CAChE,CACF,CAAC;QAGJ,OAAO;YACL,MAAM,EAAE,QAAQ;YAChB,GAAG,EAAE,OAAO,CAAC,GAAG,CAAC,QAAQ;oBACzB,MAAM;SACP,CAAC;KACH;IACD,MAAM,SAAS,EAAC,SAAE,KAAK,CAAA,UAAE,MAAM,CAAA,EAAE,EAAE;QACjC,CAAA,GAAA,yBAAS,CAAA,CAAC;YAAE,UAAU,EAAE,KAAK;SAAE,CAAC,CAAC;QACjC,IAAI,IAAI,GAAG,MAAM,KAAK,CAAC,OAAO,EAAE,AAAC;QACjC,IAAI,MAAM,GAAG,CAAA,GAAA,4BAAY,CAAA,CAAC,IAAI,EAAE;YAC9B,GAAG,MAAM;YACT,QAAQ,EAAE,CAAA,GAAA,wBAAQ,CAAA,CAAC,KAAK,CAAC,QAAQ,CAAC;SACnC,CAAC,AAAC;QACH,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QACtB,OAAO;YAAC,KAAK;SAAC,CAAC;KAChB;CACF,CAAC","sources":["src/index.js"],"sourcesContent":["import { basename, extname } from \"node:path\";\nimport { Transformer } from \"@parcel/plugin\";\nimport { renderString, configure } from \"nunjucks\";\n\nexport default new Transformer({\n  async loadConfig({ config }) {\n    // load config file\n    const { contents } = await config.getConfig([\"config.json\"]);\n    // find archie files to insert\n    let archie = null;\n    const confaml = contents?.fetch?.filter(d => extname(d.output) === \".json\");\n    if (confaml?.length === 1) {\n      archie = (await config.getConfig([confaml[0].output]))?.contents;\n    } else if (confaml?.length > 1) {\n      archie = await Promise.all(\n        confaml.map(\n          async (aml) => (await config.getConfig([aml.output]))?.contents\n        )\n      );\n    }\n\n    return {\n      config: contents,\n      env: process.env.NODE_ENV,\n      archie,\n    };\n  },\n  async transform({ asset, config }) {\n    configure({ autoescape: false });\n    let code = await asset.getCode();\n    let result = renderString(code, {\n      ...config,\n      filename: basename(asset.filePath),\n    });\n    asset.setCode(result);\n    return [asset];\n  },\n});\n"],"names":[],"version":3,"file":"index.js.map","sourceRoot":"../"}